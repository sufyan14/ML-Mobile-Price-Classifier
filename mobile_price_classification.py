# -*- coding: utf-8 -*-
"""ML Project 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJQENk6C_cQUL6eVGygUXY28oLVsssYz

# **Machine Learning Project (Mobile Price Classification using *Random Forest*)**

### By ***Muhammad Sufyan***

## **Importing Libraries and Loading Dataset**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt


df = pd.read_csv('/content/mobile_price_classification_modified.csv')
df.head(5)

"""## **Data Preprocessing**

### **Define Features and Target Value**
"""

X = df.drop('price_range', axis=1)
y = df['price_range']

"""### **Split the Data**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""### **Scale the Data (Optional for Random Forest)**"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""## **Train the Random Forest Model**"""

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)

"""## **Make Predictions**"""

y_pred = rf.predict(X_test_scaled)

"""## **Evaluate the model**"""

accuracy = accuracy_score(y_test, y_pred)
print(f"Random Forest Accuracy: {accuracy:.2f}")

"""## **Data Visualization**

### **Confusion matrix**
"""

cm = confusion_matrix(y_test, y_pred)
cr = classification_report(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Class 0', 'Class 1', 'Class 2', 'Class 3'],
            yticklabels=['Class 0', 'Class 1', 'Class 2', 'Class 3'])
plt.title("Confusion Matrix")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.show()

"""### **Classification Report**"""

cr = classification_report(y_test, y_pred, output_dict=True)
cr_df = pd.DataFrame(cr).transpose()

plt.figure(figsize=(10, 6))
sns.heatmap(cr_df.iloc[:-1, :-1], annot=True, cmap='YlGnBu')
plt.title("Classification Report Heatmap")
plt.show()